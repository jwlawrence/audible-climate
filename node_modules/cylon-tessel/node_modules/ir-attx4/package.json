{
  "name": "ir-attx4",
  "version": "0.1.3",
  "description": "The library for sending and receiving IR data from a Tessel IR Module",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "github.com/tessel/ir-attx4"
  },
  "directories": {
    "example": "examples"
  },
  "scripts": {
    "test": "tinytap -e 'tessel run {}' test/*.js"
  },
  "hardware": {
    "./examples": false,
    "./firmware": false
  },
  "author": "",
  "license": "MIT/Apache 2.0",
  "devDependencies": {
    "tinytap": "~0.0.2"
  },
  "readme": "#Infrared\nDriver for the ir-attx4 Tessel infrared module. The hardware documentation for this module can be found [here](https://github.com/tessel/hardware/blob/master/modules-overview.md#infrared).\n\nIf you run into any issues you can ask for support on the [IR Module Forums](http://forums.tessel.io/category/ir).\n\n###Installation\n```sh\nnpm install ir-attx4\n```\n\n###Example\n```js\n/*********************************************\nThis infrared module example transmits the\npower signal sequence of an Insignia brand\ntelevision every three seconds, while also\nlistening for (and logging) any incoming\ninfrared data.\n*********************************************/\n\nvar tessel = require('tessel');\nvar infraredlib = require('ir-attx4');\nvar infrared = infraredlib.use(tessel.port['A']); \n\n// When we're connected\ninfrared.on('ready', function() {\n  if (!err) {\n    console.log(\"Connected to IR!\");\n    // Start sending a signal every three seconds\n    setInterval(function() {\n      // Make a buffer of on/off durations (each duration is 16 bits)\n      var powerBuffer = new Buffer([0, 178, 255, 168, 0, 12, 255, 246, 0, 13, 255, 225, 0, 13, 255, 224, 0, 12, 255, 246, 0, 12, 255, 246, 0, 13, 255, 247, 0, 13, 255, 247, 0, 13, 255, 224, 0, 12, 255, 224, 0, 13, 255, 247, 0, 13, 255, 224, 0, 12, 255, 246, 0, 12, 255, 246, 0, 12, 255, 246, 0, 12, 255, 246, 0, 13, 255, 247, 0, 13, 255, 224, 0, 12, 255, 224, 0, 13, 255, 225, 0, 13, 255, 224, 0, 12, 255, 246, 0, 12, 255, 246, 0, 13, 255, 247, 0, 13, 255, 247, 0, 13, 255, 246, 0, 12, 255, 246, 0, 12, 255, 246, 0, 12, 255, 246, 0, 12, 255, 224, 0, 13, 255, 224, 0, 12, 255, 224, 0, 12, 255, 224, 0, 12]);\n      // Send the signal at 38 kHz\n      infrared.sendRawSignal(38, powerBuffer, function(err) {\n        if (err) {\n          console.log(\"Unable to send signal: \", err);\n        } else {\n          console.log(\"Signal sent!\");\n        }\n      });\n    }, 3000); // Every 3 seconds\n  } else {\n    console.log(err);\n  }\n});\n\n// If we get data, print it out\ninfrared.on('data', function(data) {\n\tconsole.log(\"Received RX Data: \", data);\n});\n```\n\n###Methods\n&#x20;<a href=\"#api-infrared-sendRawSignal-frequency-signalDurations-callback-The-primary-method-for-sending-data-The-first-argument-is-a-frequency-of-signal-in-Hz-typically-38-but-can-range-from-36-to-40-The-second-argument-is-a-buffer-of-unsigned-16-bit-integers-representing-the-number-of-microseconds-the-transmission-should-be-on-The-max-length-of-the-signal-durations-is-100-durations\" name=\"api-infrared-sendRawSignal-frequency-signalDurations-callback-The-primary-method-for-sending-data-The-first-argument-is-a-frequency-of-signal-in-Hz-typically-38-but-can-range-from-36-to-40-The-second-argument-is-a-buffer-of-unsigned-16-bit-integers-representing-the-number-of-microseconds-the-transmission-should-be-on-The-max-length-of-the-signal-durations-is-100-durations\">#</a> infrared<b>.sendRawSignal</b>( frequency, signalDurations, callback )  \nThe primary method for sending data. The first argument is a frequency of signal in Hz, typically 38 but can range from 36 to 40. The second argument is a buffer of unsigned 16 bit integers representing the number of microseconds the transmission should be on. The max length of the signal durations is 100 durations.  \n\n&#x20;<a href=\"#api-infrared-setListening-set-callback-Determines-whether-the-module-is-listening-for-incoming-signals-Will-automatically-be-set-and-unset-depending-on-listeners-for-the-data-event\" name=\"api-infrared-setListening-set-callback-Determines-whether-the-module-is-listening-for-incoming-signals-Will-automatically-be-set-and-unset-depending-on-listeners-for-the-data-event\">#</a> infrared<b>.setListening</b>( set, callback )  \nDetermines whether the module is listening for incoming signals. Will automatically be set and unset depending on listeners for the data event.  \n\n###Events\n&#x20;<a href=\"#api-infrared-on-data-callback-data-Emitted-when-an-infrared-signal-is-detected\" name=\"api-infrared-on-data-callback-data-Emitted-when-an-infrared-signal-is-detected\">#</a> infrared<b>.on</b>( 'data', callback(data) )  \nEmitted when an infrared signal is detected.  \n\n&#x20;<a href=\"#api-infrared-on-error-callback-err-Emitted-when-there-is-an-error-communicating-with-the-module\" name=\"api-infrared-on-error-callback-err-Emitted-when-there-is-an-error-communicating-with-the-module\">#</a> infrared<b>.on</b>( 'error', callback(err) )  \nEmitted when there is an error communicating with the module.  \n\n&#x20;<a href=\"#api-infrared-on-ready-callback-Emitted-upon-first-successful-communication-between-the-Tessel-and-the-module\" name=\"api-infrared-on-ready-callback-Emitted-upon-first-successful-communication-between-the-Tessel-and-the-module\">#</a> infrared<b>.on</b>( 'ready', callback() )  \nEmitted upon first successful communication between the Tessel and the module.  \n\n###License\nReleased under the MIT and Apache 2.0 licenses.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tessel/ir-attx4/issues"
  },
  "homepage": "https://github.com/tessel/ir-attx4",
  "_id": "ir-attx4@0.1.3",
  "dist": {
    "shasum": "95883b4a1a14ff22040462ce0b45af62ec28ed8a"
  },
  "_from": "ir-attx4@~0.1.2",
  "_resolved": "https://registry.npmjs.org/ir-attx4/-/ir-attx4-0.1.3.tgz"
}
