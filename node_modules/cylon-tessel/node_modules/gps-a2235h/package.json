{
  "name": "gps-a2235h",
  "version": "0.1.3",
  "description": "Library to run Tessel's GPS module.",
  "main": "index.js",
  "scripts": {
    "test": "tinytap -e 'tessel run {} ${GPS_PORT}' test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:tessel/gps-a2235h.git"
  },
  "author": {
    "name": "Kelsey Breseman",
    "email": "kelsey@technical.io"
  },
  "license": "MIT",
  "dependencies": {
    "nmea": "0.0.6"
  },
  "devDependencies": {
    "tinytap": "~0.0.2"
  },
  "readme": "#GPS\nDriver for the gps-a2235h Tessel GPS module ([A2235-H](http://www.mouser.com/catalog/specsheets/EVA2235-H.pdf)).\n\n##Installation\n```sh\nnpm install gps-a2235h\n```\n\n##Example\n```js\n// Any copyright is dedicated to the Public Domain.\n// http://creativecommons.org/publicdomain/zero/1.0/\n\n/**********************************************************\nThis gps example logs a stream of data:\ncoordinates, detected satellites, timestamps, and altitude.\nFor best results, try it while outdoors.\n**********************************************************/\n\nvar tessel = require('tessel');\nvar gps = require('gps-a2235h').use(tessel.port['A']);\n\n// Wait until the module is connected\ngps.on('ready', function () {\n  console.log('GPS module powered and ready. Waiting for satellites...');\n  // Emit coordinates when we get a coordinate fix\n  gps.on('coordinates', function (coords) {\n    console.log('Got some coordinates!');\n    console.log('  Lat:\\t', coords.lat);\n    console.log('  Lat:\\t', coords.lon);\n    console.log('  Timestamp:\\t', coords.timestamp);\n  });\n\n  // Emit altitude when we get an altitude fix\n  gps.on('altitude', function (alt) {\n    console.log('Got an altitude of', alt.alt,\n      'meters (timestamp: ' + alt.timestamp + ')');\n  });\n\n  //  All data from the module is emitted by its type parameter. Parse one!\n  gps.on('satellite-list-partial', function (parsed) {\n    console.log('\\nDetected (at least) the following satellites:');\n    //  Note that the module needs to do more than just\n    //  detect a satellite in order to lock onto it\n    parsed.satellites.forEach(function (sat) {\n      console.log(' ', sat);\n    });\n  });\n\n  // Have the module act on a specific piece of data\n  var parseDate = function (parsed) {\n    // Extract and print the date and time from the given NMEA message\n    if (parsed.timestamp !== '' && parsed.date !== '') {\n      var time = parsed.timestamp;\n      var date = parsed.date;\n\n      //  Parse the data\n      var day = date.slice(0, 2);\n      var month = date.slice(2, 4);\n      var year = date.slice(4);\n      var hours = time.slice(0, 2);\n      var minutes = time.slice(2, 4);\n      var seconds = time.slice(4);\n\n      console.log('\\nCurrent GPS date and time:');\n      console.log('  Year:\\t\\t 20' + year);\n      console.log('  Month:\\t', month);\n      console.log('  Day:\\t\\t', day);\n      console.log('  Timestamp:\\t', hours + ':' + minutes + ':' + seconds);\n    }\n  };\n  // This NMEA message type contains date/time info\n  // Let's call parseDate with it!\n  gps.on('nav-info', parseDate);\n});\n```\n\n##Methods\n\n##### * `gps.powerOff(callback())` Turns the GPS chip off.\n\n##### * `gps.powerOn(callback())` Turns the GPS chip on.\n\n##### * `gps.setCoordinateFormat(format, callback())` Configure how the module reports latitude and longitude: options are 'deg-min-sec', 'deg-min-dec', and 'deg-dec'.\n\n##Events\n\n##### * `gps.on('altitude', callback(altitudeObj))` Emitted when altitude data is available. Emitted in the form {altitude in meters, timestamp}.\n\n##### * `gps.on('coordinates', callback(coordinateObj))` Emitted when coordinate data is available. Emitted in the form {latitude, longitude, timestamp}.\n\n##### * `gps.on('error', callback(err))` Emitted upon error.\n\n##### * `gps.on('powerOff', callback())` Emitted when the module has been powered off.\n\n##### * `gps.on('powerOn', callback())` Emitted when the module has been powered on.\n\n##### * `gps.on('ready', callback())` Emitted upon first successful communication between the Tessel and the module.\n\n###Also emits parsed NMEA objects by type:\n\n##### * `gps.on('active-satellites', callback(data))` NMEA GPGSA: GPS DOP and active satellites.\n\n##### * `gps.on('fix', callback(data))` NMEA GPGGA: Global positioning system fix data.\n\n##### * `gps.on('nav-info', callback(data))` NMEA GPRMC: Recommended minimum specific GPS/Transit data.\n\n##### * `gps.on('satellite-list-partial', callback(data))` NMEA GPGSV: GPS satellites in view.\n\n##### * `gps.on('track-info', callback(data))` NMEA GPVTG: Track made good and ground speed.\n\n\n## License\n\nMIT or Apache 2.0, at your option\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tessel/gps-a2235h/issues"
  },
  "homepage": "https://github.com/tessel/gps-a2235h",
  "_id": "gps-a2235h@0.1.3",
  "dist": {
    "shasum": "a44ce042688aa7fcbcace5922ee7e7a64cdcb656"
  },
  "_from": "gps-a2235h@~0.1.3",
  "_resolved": "https://registry.npmjs.org/gps-a2235h/-/gps-a2235h-0.1.3.tgz"
}
